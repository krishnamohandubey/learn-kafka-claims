/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.kafka.claimkafka.event;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ClaimSettlementEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3649825088761695835L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ClaimSettlementEvent\",\"namespace\":\"com.kafka.claimkafka.event\",\"fields\":[{\"name\":\"id\",\"type\":\"long\",\"default\":0},{\"name\":\"netDearnessAllowance\",\"type\":\"long\",\"default\":0},{\"name\":\"travelExpense\",\"type\":\"long\",\"default\":0},{\"name\":\"hotelExpense\",\"type\":\"long\",\"default\":0},{\"name\":\"mealExpense\",\"type\":\"long\",\"default\":0},{\"name\":\"localConveyanceExpense\",\"type\":\"long\",\"default\":0},{\"name\":\"otherExpense\",\"type\":\"long\",\"default\":0},{\"name\":\"payableAmount\",\"type\":\"long\",\"default\":0}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ClaimSettlementEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ClaimSettlementEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ClaimSettlementEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ClaimSettlementEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ClaimSettlementEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ClaimSettlementEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ClaimSettlementEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ClaimSettlementEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ClaimSettlementEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long id;
  private long netDearnessAllowance;
  private long travelExpense;
  private long hotelExpense;
  private long mealExpense;
  private long localConveyanceExpense;
  private long otherExpense;
  private long payableAmount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ClaimSettlementEvent() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param netDearnessAllowance The new value for netDearnessAllowance
   * @param travelExpense The new value for travelExpense
   * @param hotelExpense The new value for hotelExpense
   * @param mealExpense The new value for mealExpense
   * @param localConveyanceExpense The new value for localConveyanceExpense
   * @param otherExpense The new value for otherExpense
   * @param payableAmount The new value for payableAmount
   */
  public ClaimSettlementEvent(java.lang.Long id, java.lang.Long netDearnessAllowance, java.lang.Long travelExpense, java.lang.Long hotelExpense, java.lang.Long mealExpense, java.lang.Long localConveyanceExpense, java.lang.Long otherExpense, java.lang.Long payableAmount) {
    this.id = id;
    this.netDearnessAllowance = netDearnessAllowance;
    this.travelExpense = travelExpense;
    this.hotelExpense = hotelExpense;
    this.mealExpense = mealExpense;
    this.localConveyanceExpense = localConveyanceExpense;
    this.otherExpense = otherExpense;
    this.payableAmount = payableAmount;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return netDearnessAllowance;
    case 2: return travelExpense;
    case 3: return hotelExpense;
    case 4: return mealExpense;
    case 5: return localConveyanceExpense;
    case 6: return otherExpense;
    case 7: return payableAmount;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: netDearnessAllowance = (java.lang.Long)value$; break;
    case 2: travelExpense = (java.lang.Long)value$; break;
    case 3: hotelExpense = (java.lang.Long)value$; break;
    case 4: mealExpense = (java.lang.Long)value$; break;
    case 5: localConveyanceExpense = (java.lang.Long)value$; break;
    case 6: otherExpense = (java.lang.Long)value$; break;
    case 7: payableAmount = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'netDearnessAllowance' field.
   * @return The value of the 'netDearnessAllowance' field.
   */
  public long getNetDearnessAllowance() {
    return netDearnessAllowance;
  }


  /**
   * Sets the value of the 'netDearnessAllowance' field.
   * @param value the value to set.
   */
  public void setNetDearnessAllowance(long value) {
    this.netDearnessAllowance = value;
  }

  /**
   * Gets the value of the 'travelExpense' field.
   * @return The value of the 'travelExpense' field.
   */
  public long getTravelExpense() {
    return travelExpense;
  }


  /**
   * Sets the value of the 'travelExpense' field.
   * @param value the value to set.
   */
  public void setTravelExpense(long value) {
    this.travelExpense = value;
  }

  /**
   * Gets the value of the 'hotelExpense' field.
   * @return The value of the 'hotelExpense' field.
   */
  public long getHotelExpense() {
    return hotelExpense;
  }


  /**
   * Sets the value of the 'hotelExpense' field.
   * @param value the value to set.
   */
  public void setHotelExpense(long value) {
    this.hotelExpense = value;
  }

  /**
   * Gets the value of the 'mealExpense' field.
   * @return The value of the 'mealExpense' field.
   */
  public long getMealExpense() {
    return mealExpense;
  }


  /**
   * Sets the value of the 'mealExpense' field.
   * @param value the value to set.
   */
  public void setMealExpense(long value) {
    this.mealExpense = value;
  }

  /**
   * Gets the value of the 'localConveyanceExpense' field.
   * @return The value of the 'localConveyanceExpense' field.
   */
  public long getLocalConveyanceExpense() {
    return localConveyanceExpense;
  }


  /**
   * Sets the value of the 'localConveyanceExpense' field.
   * @param value the value to set.
   */
  public void setLocalConveyanceExpense(long value) {
    this.localConveyanceExpense = value;
  }

  /**
   * Gets the value of the 'otherExpense' field.
   * @return The value of the 'otherExpense' field.
   */
  public long getOtherExpense() {
    return otherExpense;
  }


  /**
   * Sets the value of the 'otherExpense' field.
   * @param value the value to set.
   */
  public void setOtherExpense(long value) {
    this.otherExpense = value;
  }

  /**
   * Gets the value of the 'payableAmount' field.
   * @return The value of the 'payableAmount' field.
   */
  public long getPayableAmount() {
    return payableAmount;
  }


  /**
   * Sets the value of the 'payableAmount' field.
   * @param value the value to set.
   */
  public void setPayableAmount(long value) {
    this.payableAmount = value;
  }

  /**
   * Creates a new ClaimSettlementEvent RecordBuilder.
   * @return A new ClaimSettlementEvent RecordBuilder
   */
  public static com.kafka.claimkafka.event.ClaimSettlementEvent.Builder newBuilder() {
    return new com.kafka.claimkafka.event.ClaimSettlementEvent.Builder();
  }

  /**
   * Creates a new ClaimSettlementEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ClaimSettlementEvent RecordBuilder
   */
  public static com.kafka.claimkafka.event.ClaimSettlementEvent.Builder newBuilder(com.kafka.claimkafka.event.ClaimSettlementEvent.Builder other) {
    if (other == null) {
      return new com.kafka.claimkafka.event.ClaimSettlementEvent.Builder();
    } else {
      return new com.kafka.claimkafka.event.ClaimSettlementEvent.Builder(other);
    }
  }

  /**
   * Creates a new ClaimSettlementEvent RecordBuilder by copying an existing ClaimSettlementEvent instance.
   * @param other The existing instance to copy.
   * @return A new ClaimSettlementEvent RecordBuilder
   */
  public static com.kafka.claimkafka.event.ClaimSettlementEvent.Builder newBuilder(com.kafka.claimkafka.event.ClaimSettlementEvent other) {
    if (other == null) {
      return new com.kafka.claimkafka.event.ClaimSettlementEvent.Builder();
    } else {
      return new com.kafka.claimkafka.event.ClaimSettlementEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for ClaimSettlementEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ClaimSettlementEvent>
    implements org.apache.avro.data.RecordBuilder<ClaimSettlementEvent> {

    private long id;
    private long netDearnessAllowance;
    private long travelExpense;
    private long hotelExpense;
    private long mealExpense;
    private long localConveyanceExpense;
    private long otherExpense;
    private long payableAmount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.kafka.claimkafka.event.ClaimSettlementEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.netDearnessAllowance)) {
        this.netDearnessAllowance = data().deepCopy(fields()[1].schema(), other.netDearnessAllowance);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.travelExpense)) {
        this.travelExpense = data().deepCopy(fields()[2].schema(), other.travelExpense);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.hotelExpense)) {
        this.hotelExpense = data().deepCopy(fields()[3].schema(), other.hotelExpense);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.mealExpense)) {
        this.mealExpense = data().deepCopy(fields()[4].schema(), other.mealExpense);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.localConveyanceExpense)) {
        this.localConveyanceExpense = data().deepCopy(fields()[5].schema(), other.localConveyanceExpense);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.otherExpense)) {
        this.otherExpense = data().deepCopy(fields()[6].schema(), other.otherExpense);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.payableAmount)) {
        this.payableAmount = data().deepCopy(fields()[7].schema(), other.payableAmount);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing ClaimSettlementEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.kafka.claimkafka.event.ClaimSettlementEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.netDearnessAllowance)) {
        this.netDearnessAllowance = data().deepCopy(fields()[1].schema(), other.netDearnessAllowance);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.travelExpense)) {
        this.travelExpense = data().deepCopy(fields()[2].schema(), other.travelExpense);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.hotelExpense)) {
        this.hotelExpense = data().deepCopy(fields()[3].schema(), other.hotelExpense);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.mealExpense)) {
        this.mealExpense = data().deepCopy(fields()[4].schema(), other.mealExpense);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.localConveyanceExpense)) {
        this.localConveyanceExpense = data().deepCopy(fields()[5].schema(), other.localConveyanceExpense);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.otherExpense)) {
        this.otherExpense = data().deepCopy(fields()[6].schema(), other.otherExpense);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.payableAmount)) {
        this.payableAmount = data().deepCopy(fields()[7].schema(), other.payableAmount);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.kafka.claimkafka.event.ClaimSettlementEvent.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.kafka.claimkafka.event.ClaimSettlementEvent.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'netDearnessAllowance' field.
      * @return The value.
      */
    public long getNetDearnessAllowance() {
      return netDearnessAllowance;
    }


    /**
      * Sets the value of the 'netDearnessAllowance' field.
      * @param value The value of 'netDearnessAllowance'.
      * @return This builder.
      */
    public com.kafka.claimkafka.event.ClaimSettlementEvent.Builder setNetDearnessAllowance(long value) {
      validate(fields()[1], value);
      this.netDearnessAllowance = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'netDearnessAllowance' field has been set.
      * @return True if the 'netDearnessAllowance' field has been set, false otherwise.
      */
    public boolean hasNetDearnessAllowance() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'netDearnessAllowance' field.
      * @return This builder.
      */
    public com.kafka.claimkafka.event.ClaimSettlementEvent.Builder clearNetDearnessAllowance() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'travelExpense' field.
      * @return The value.
      */
    public long getTravelExpense() {
      return travelExpense;
    }


    /**
      * Sets the value of the 'travelExpense' field.
      * @param value The value of 'travelExpense'.
      * @return This builder.
      */
    public com.kafka.claimkafka.event.ClaimSettlementEvent.Builder setTravelExpense(long value) {
      validate(fields()[2], value);
      this.travelExpense = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'travelExpense' field has been set.
      * @return True if the 'travelExpense' field has been set, false otherwise.
      */
    public boolean hasTravelExpense() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'travelExpense' field.
      * @return This builder.
      */
    public com.kafka.claimkafka.event.ClaimSettlementEvent.Builder clearTravelExpense() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'hotelExpense' field.
      * @return The value.
      */
    public long getHotelExpense() {
      return hotelExpense;
    }


    /**
      * Sets the value of the 'hotelExpense' field.
      * @param value The value of 'hotelExpense'.
      * @return This builder.
      */
    public com.kafka.claimkafka.event.ClaimSettlementEvent.Builder setHotelExpense(long value) {
      validate(fields()[3], value);
      this.hotelExpense = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'hotelExpense' field has been set.
      * @return True if the 'hotelExpense' field has been set, false otherwise.
      */
    public boolean hasHotelExpense() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'hotelExpense' field.
      * @return This builder.
      */
    public com.kafka.claimkafka.event.ClaimSettlementEvent.Builder clearHotelExpense() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'mealExpense' field.
      * @return The value.
      */
    public long getMealExpense() {
      return mealExpense;
    }


    /**
      * Sets the value of the 'mealExpense' field.
      * @param value The value of 'mealExpense'.
      * @return This builder.
      */
    public com.kafka.claimkafka.event.ClaimSettlementEvent.Builder setMealExpense(long value) {
      validate(fields()[4], value);
      this.mealExpense = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'mealExpense' field has been set.
      * @return True if the 'mealExpense' field has been set, false otherwise.
      */
    public boolean hasMealExpense() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'mealExpense' field.
      * @return This builder.
      */
    public com.kafka.claimkafka.event.ClaimSettlementEvent.Builder clearMealExpense() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'localConveyanceExpense' field.
      * @return The value.
      */
    public long getLocalConveyanceExpense() {
      return localConveyanceExpense;
    }


    /**
      * Sets the value of the 'localConveyanceExpense' field.
      * @param value The value of 'localConveyanceExpense'.
      * @return This builder.
      */
    public com.kafka.claimkafka.event.ClaimSettlementEvent.Builder setLocalConveyanceExpense(long value) {
      validate(fields()[5], value);
      this.localConveyanceExpense = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'localConveyanceExpense' field has been set.
      * @return True if the 'localConveyanceExpense' field has been set, false otherwise.
      */
    public boolean hasLocalConveyanceExpense() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'localConveyanceExpense' field.
      * @return This builder.
      */
    public com.kafka.claimkafka.event.ClaimSettlementEvent.Builder clearLocalConveyanceExpense() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'otherExpense' field.
      * @return The value.
      */
    public long getOtherExpense() {
      return otherExpense;
    }


    /**
      * Sets the value of the 'otherExpense' field.
      * @param value The value of 'otherExpense'.
      * @return This builder.
      */
    public com.kafka.claimkafka.event.ClaimSettlementEvent.Builder setOtherExpense(long value) {
      validate(fields()[6], value);
      this.otherExpense = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'otherExpense' field has been set.
      * @return True if the 'otherExpense' field has been set, false otherwise.
      */
    public boolean hasOtherExpense() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'otherExpense' field.
      * @return This builder.
      */
    public com.kafka.claimkafka.event.ClaimSettlementEvent.Builder clearOtherExpense() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'payableAmount' field.
      * @return The value.
      */
    public long getPayableAmount() {
      return payableAmount;
    }


    /**
      * Sets the value of the 'payableAmount' field.
      * @param value The value of 'payableAmount'.
      * @return This builder.
      */
    public com.kafka.claimkafka.event.ClaimSettlementEvent.Builder setPayableAmount(long value) {
      validate(fields()[7], value);
      this.payableAmount = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'payableAmount' field has been set.
      * @return True if the 'payableAmount' field has been set, false otherwise.
      */
    public boolean hasPayableAmount() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'payableAmount' field.
      * @return This builder.
      */
    public com.kafka.claimkafka.event.ClaimSettlementEvent.Builder clearPayableAmount() {
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ClaimSettlementEvent build() {
      try {
        ClaimSettlementEvent record = new ClaimSettlementEvent();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.netDearnessAllowance = fieldSetFlags()[1] ? this.netDearnessAllowance : (java.lang.Long) defaultValue(fields()[1]);
        record.travelExpense = fieldSetFlags()[2] ? this.travelExpense : (java.lang.Long) defaultValue(fields()[2]);
        record.hotelExpense = fieldSetFlags()[3] ? this.hotelExpense : (java.lang.Long) defaultValue(fields()[3]);
        record.mealExpense = fieldSetFlags()[4] ? this.mealExpense : (java.lang.Long) defaultValue(fields()[4]);
        record.localConveyanceExpense = fieldSetFlags()[5] ? this.localConveyanceExpense : (java.lang.Long) defaultValue(fields()[5]);
        record.otherExpense = fieldSetFlags()[6] ? this.otherExpense : (java.lang.Long) defaultValue(fields()[6]);
        record.payableAmount = fieldSetFlags()[7] ? this.payableAmount : (java.lang.Long) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ClaimSettlementEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<ClaimSettlementEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ClaimSettlementEvent>
    READER$ = (org.apache.avro.io.DatumReader<ClaimSettlementEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    out.writeLong(this.netDearnessAllowance);

    out.writeLong(this.travelExpense);

    out.writeLong(this.hotelExpense);

    out.writeLong(this.mealExpense);

    out.writeLong(this.localConveyanceExpense);

    out.writeLong(this.otherExpense);

    out.writeLong(this.payableAmount);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      this.netDearnessAllowance = in.readLong();

      this.travelExpense = in.readLong();

      this.hotelExpense = in.readLong();

      this.mealExpense = in.readLong();

      this.localConveyanceExpense = in.readLong();

      this.otherExpense = in.readLong();

      this.payableAmount = in.readLong();

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          this.netDearnessAllowance = in.readLong();
          break;

        case 2:
          this.travelExpense = in.readLong();
          break;

        case 3:
          this.hotelExpense = in.readLong();
          break;

        case 4:
          this.mealExpense = in.readLong();
          break;

        case 5:
          this.localConveyanceExpense = in.readLong();
          break;

        case 6:
          this.otherExpense = in.readLong();
          break;

        case 7:
          this.payableAmount = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










